"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _a;
"use strict";
const Path_1 = require("./Path");
const PARENT = Symbol();
const CHILDREN = Symbol();
const IS_ROOT_KEY = Symbol();
const DEPTH = Symbol();
const PATH = Symbol();
const PARENTS = Symbol();
class KeyNode extends String {
    constructor(key, parentKey = null) {
        super(key);
        this[_a] = new Set();
        this[PARENT] = parentKey;
        if (parentKey !== null) {
            parentKey[CHILDREN].add(this);
        }
        this[IS_ROOT_KEY] = this[PARENT] === null;
    }
    //Accessors
    get isRootKey() {
        return this[IS_ROOT_KEY];
    }
    get isTerminalKey() {
        return this[CHILDREN].size === 0;
    }
    get parent() {
        return this[PARENT];
    }
    get [(_a = CHILDREN, Symbol.toStringTag)]() {
        return this.constructor.name;
    }
    get path() {
        //Get and cache depth; lazy
        if (this[PATH] === undefined) {
            let path = [this];
            for (const parent of this.parents()) {
                path.unshift(parent);
            }
            this[PATH] = new Path_1.default(path);
        }
        return this[PATH];
    }
    get numChildren() {
        return this[CHILDREN].size;
    }
    get depth() {
        //Get and cache depth; lazy
        if (this[DEPTH] === undefined) {
            let depth = 0;
            for (const pKey of this.parents()) {
                depth++;
            }
            this[DEPTH] = depth;
        }
        return this[DEPTH];
    }
    //Mehtods
    parents() {
        //Get and cache parents; lazy
        if (this[PARENTS] === undefined) {
            let pKeys = new Set();
            let pKey = this[PARENT];
            while (pKey !== null) {
                pKeys.add(pKey);
                pKey = pKey[PARENT];
            }
            this[PARENTS] = pKeys;
        }
        return this[PARENTS].values();
    }
    children() {
        return this[CHILDREN].values();
    }
    *siblings() {
        //NOTE: Not cached b/c can increase.
        const parent = this[PARENT];
        if (parent === null) {
            return;
        }
        for (const sib of parent.children()) {
            if (sib !== this) {
                yield sib;
            }
        }
    }
}
exports.default = KeyNode;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiS2V5Tm9kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9LZXlOb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxpQ0FBMEI7QUFFMUIsTUFBTSxNQUFNLEdBQWlCLE1BQU0sRUFBRSxDQUFDO0FBQ3RDLE1BQU0sUUFBUSxHQUFpQixNQUFNLEVBQUUsQ0FBQztBQUN4QyxNQUFNLFdBQVcsR0FBaUIsTUFBTSxFQUFFLENBQUM7QUFDM0MsTUFBTSxLQUFLLEdBQWlCLE1BQU0sRUFBRSxDQUFDO0FBQ3JDLE1BQU0sSUFBSSxHQUFpQixNQUFNLEVBQUUsQ0FBQztBQUNwQyxNQUFNLE9BQU8sR0FBaUIsTUFBTSxFQUFFLENBQUM7QUFHdkMsYUFBNkIsU0FBUSxNQUFNO0lBU3pDLFlBQVksR0FBVSxFQUFFLFlBQW9CLElBQUk7UUFFOUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBUkksUUFBVSxHQUFHLElBQUksR0FBRyxFQUFXLENBQUM7UUFVL0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQztRQUV6QixJQUFHLFNBQVMsS0FBSyxJQUFJLEVBQUM7WUFFcEIsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUUvQjtRQUVELElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssSUFBSSxDQUFDO0lBRTVDLENBQUM7SUFFRCxXQUFXO0lBQ1gsSUFBSSxTQUFTO1FBRVgsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFFM0IsQ0FBQztJQUNELElBQUksYUFBYTtRQUVmLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUM7SUFFbkMsQ0FBQztJQUVELElBQUksTUFBTTtRQUVSLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRXRCLENBQUM7SUFFRCxJQUFJLE9BeENjLFFBQVEsRUF3Q3JCLE1BQU0sQ0FBQyxXQUFXLEVBQUM7UUFFdEIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztJQUUvQixDQUFDO0lBRUQsSUFBSSxJQUFJO1FBRU4sMkJBQTJCO1FBQzNCLElBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLFNBQVMsRUFBQztZQUUxQixJQUFJLElBQUksR0FBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRTVCLEtBQUksTUFBTSxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFDO2dCQUVqQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBRXRCO1lBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksY0FBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBRTdCO1FBRUQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFcEIsQ0FBQztJQUVELElBQUksV0FBVztRQUViLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUU3QixDQUFDO0lBRUQsSUFBSSxLQUFLO1FBRVAsMkJBQTJCO1FBQzNCLElBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLFNBQVMsRUFBQztZQUUzQixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7WUFFZCxLQUFJLE1BQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBQztnQkFFL0IsS0FBSyxFQUFFLENBQUM7YUFFVDtZQUVELElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUM7U0FFckI7UUFFRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUVyQixDQUFDO0lBRUQsU0FBUztJQUNULE9BQU87UUFFTCw2QkFBNkI7UUFDN0IsSUFBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssU0FBUyxFQUFDO1lBRTdCLElBQUksS0FBSyxHQUFHLElBQUksR0FBRyxFQUFXLENBQUM7WUFFL0IsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBRXhCLE9BQU0sSUFBSSxLQUFLLElBQUksRUFBQztnQkFFbEIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFFaEIsSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTthQUVwQjtZQUVELElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxLQUFLLENBQUM7U0FFdkI7UUFFRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUVoQyxDQUFDO0lBRUQsUUFBUTtRQUVOLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBRWpDLENBQUM7SUFFRCxDQUFDLFFBQVE7UUFFUCxvQ0FBb0M7UUFDcEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTVCLElBQUcsTUFBTSxLQUFLLElBQUksRUFBQztZQUVqQixPQUFPO1NBRVI7UUFFRCxLQUFJLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLEVBQUUsRUFBQztZQUVqQyxJQUFHLEdBQUcsS0FBSyxJQUFJLEVBQUM7Z0JBRWQsTUFBTSxHQUFHLENBQUM7YUFFWDtTQUVGO0lBRUgsQ0FBQztDQUVGO0FBeEpELDBCQXdKQyJ9