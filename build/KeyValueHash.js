"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Key_1 = require("./Key");
const RootKey_1 = require("./RootKey");
function* entries(obj) {
    if (Array.isArray(obj)) {
        yield* obj.entries();
    }
    else {
        const hasOwnProp = Object.prototype.hasOwnProperty.bind(obj);
        const isEnumerable = Object.prototype.propertyIsEnumerable.bind(obj);
        for (let key in obj) {
            if (hasOwnProp(key) && isEnumerable(key)) {
                yield [key, obj[key]];
            }
        }
    }
}
const KEY_VALUE_MAP = Symbol();
const ROOT_KEYS = Symbol();
const OBJECT_KEY = Symbol();
class KeyValueHash {
    constructor(objToHash) {
        const keyValueMap = new Map();
        const rootKeys = new Set();
        //Root Keys
        for (const [k, val] of entries(objToHash)) {
            const rootKey = new RootKey_1.default(k.toString(), rootKeys);
            keyValueMap.set(rootKey, val);
        }
        for (const [pKey, pKeyVal] of keyValueMap) {
            if (typeof pKeyVal === 'object' && pKeyVal !== null) {
                for (const [k, val] of entries(pKeyVal)) {
                    const key = new Key_1.default(k.toString(), pKey);
                    keyValueMap.set(key, val);
                }
            }
        }
        this[KEY_VALUE_MAP] = keyValueMap;
        this[ROOT_KEYS] = rootKeys;
        this[OBJECT_KEY] = objToHash;
    }
    //Accessors
    get size() {
        return this[KEY_VALUE_MAP].size;
    }
    get srcObject() {
        return this[OBJECT_KEY];
    }
    //Methods
    entries() {
        return this[KEY_VALUE_MAP].entries();
    }
    keys() {
        return this[KEY_VALUE_MAP].keys();
    }
    values() {
        return this[KEY_VALUE_MAP].values();
    }
    rootKeys() {
        return this[ROOT_KEYS].values();
    }
    [Symbol.iterator]() {
        return this[KEY_VALUE_MAP][Symbol.iterator]();
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
}
exports.default = KeyValueHash;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiS2V5VmFsdWVIYXNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0tleVZhbHVlSGFzaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUF3QjtBQUN4Qix1Q0FBZ0M7QUFFaEMsUUFBUSxDQUFDLFNBQVMsR0FBRztJQUVuQixJQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUM7UUFFcEIsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO0tBRXRCO1NBQU07UUFFTCxNQUFNLFVBQVUsR0FDYyxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDeEUsTUFBTSxZQUFZLEdBQ1ksTUFBTSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFOUUsS0FBSSxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQUM7WUFFakIsSUFBRyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUFDO2dCQUV0QyxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBRXZCO1NBRUY7S0FFRjtBQUVILENBQUM7QUFFRCxNQUFNLGFBQWEsR0FBaUIsTUFBTSxFQUFFLENBQUM7QUFDN0MsTUFBTSxTQUFTLEdBQWlCLE1BQU0sRUFBRSxDQUFDO0FBQ3pDLE1BQU0sVUFBVSxHQUFpQixNQUFNLEVBQUUsQ0FBQztBQUUxQztJQU1FLFlBQVksU0FBaUI7UUFFM0IsTUFBTSxXQUFXLEdBQUcsSUFBSSxHQUFHLEVBQVksQ0FBQztRQUN4QyxNQUFNLFFBQVEsR0FBRyxJQUFJLEdBQUcsRUFBVyxDQUFDO1FBRXBDLFdBQVc7UUFDWCxLQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFDO1lBRXZDLE1BQU0sT0FBTyxHQUFHLElBQUksaUJBQU8sQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFFcEQsV0FBVyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FFL0I7UUFFRCxLQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUksV0FBVyxFQUFDO1lBRXZDLElBQUcsT0FBTyxPQUFPLEtBQUssUUFBUSxJQUFJLE9BQU8sS0FBSyxJQUFJLEVBQUM7Z0JBRWpELEtBQUksTUFBTSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUM7b0JBRXJDLE1BQU0sR0FBRyxHQUFHLElBQUksYUFBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztvQkFFeEMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7aUJBRTNCO2FBRUY7U0FFRjtRQUVELElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxXQUFXLENBQUM7UUFDbEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLFFBQVEsQ0FBQztRQUMzQixJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsU0FBUyxDQUFDO0lBRS9CLENBQUM7SUFFRCxXQUFXO0lBQ1gsSUFBSSxJQUFJO1FBRU4sT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDO0lBRWxDLENBQUM7SUFFRCxJQUFJLFNBQVM7UUFFWCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUUxQixDQUFDO0lBRUQsU0FBUztJQUNULE9BQU87UUFFTCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUV2QyxDQUFDO0lBRUQsSUFBSTtRQUVGLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0lBRXBDLENBQUM7SUFFRCxNQUFNO1FBRUosT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7SUFFdEMsQ0FBQztJQUVELFFBQVE7UUFFTixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUVsQyxDQUFDO0lBRUQsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBRWYsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7SUFFaEQsQ0FBQztJQUVELElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDO1FBRXRCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7SUFFL0IsQ0FBQztDQUVGO0FBNUZELCtCQTRGQyJ9